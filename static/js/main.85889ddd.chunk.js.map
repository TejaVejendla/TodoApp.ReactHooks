{"version":3,"sources":["Components/TodoItem.js","Components/TodoList.js","Components/AddTodo.js","Components/todoData.js","Components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","todo","index","markComplete","removeTodo","title","completed","hits","className","type","checked","onChange","style","textDecoration","onClick","aria-label","aria-hidden","TodoList","todos","map","key","AddTodo","addTodo","useState","setTitle","onSubmit","e","preventDefault","console","log","value","target","placeholder","aria-describedby","id","todoData","TodoApp","setTodos","uuidv4","splice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.85889ddd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function TodoItem({ todo, index, markComplete, removeTodo }) {\r\n    //const { todo, markComplete, removeTodo } = this.props;\r\n    const { title, completed, hits } = todo;\r\n    return (\r\n    <div className={!completed ? \"alert alert-primary\" : \"alert alert-secondary\"}>\r\n        <input type=\"checkbox\" checked={completed ? \"checked\" : \"\"} onChange={() => markComplete(index)} />\r\n        <span style={{textDecoration: completed ? \"line-through\" : \"none\"}}>{' '} {title} Hits: {hits} </span>\r\n        <button type=\"button\" className=\"close\" onClick={() => removeTodo(index)} aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button>\r\n    </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nexport default function TodoList({ todos, markComplete, removeTodo }) {\r\n    //const { todos, markComplete, removeTodo } = this.props\r\n    return (\r\n      <div>\r\n        {/* <h1> TodoList </h1> */}\r\n        {todos.map((todo, index) => (\r\n          <TodoItem key={index} index={index} todo={todo} markComplete={markComplete} removeTodo={removeTodo} />\r\n        ))}\r\n      </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function AddTodo({ addTodo } ) {\r\n  const[title, setTitle] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"handleSubmit\")\r\n    addTodo(title);\r\n    setTitle('');\r\n  } \r\n\r\n  // const handleOnClick = e => {\r\n  //   console.log(\"handleOnClick\")\r\n  //   // addTodo(title);\r\n  //   // setTitle('');\r\n  // }\r\n\r\n  return (\r\n      <div>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"input-group mb-3\">\r\n              <input type=\"text\" className=\"form-control\" value={title} onChange={(e) => setTitle(e.target.value)} placeholder=\"Add Todo Notes\" aria-label=\"Add Todo Notes\" aria-describedby=\"button-addon2\"/>\r\n              <div className=\"input-group-append\">\r\n              {/* <button className=\"btn btn-outline-success\" onClick={handleOnClick} id=\"button-addon2\">Add Todo</button> */}\r\n              <button className=\"btn btn-outline-success\" id=\"button-addon2\">Add Todo</button>\r\n              </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n}\r\n","export const todoData = [\r\n    {\r\n      // userId: 1,\r\n      id: 1,\r\n      title: \"delectus aut autem\",\r\n      completed: false,\r\n      hits: 0,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"quis ut nam facilis et officia qui\",\r\n      completed: false,\r\n      hits: 0,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"fugiat veniam minus\",\r\n      completed: false,\r\n      hits: 0,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"et porro tempora\",\r\n      completed: true,\r\n      hits: 0,\r\n    },\r\n    {\r\n      id: 5,\r\n      title:\r\n        \"laboriosam mollitia et enim quasi\",\r\n      completed: false,\r\n      hits: 0,\r\n    }\r\n  ];","import React,{useState} from 'react'\r\nimport TodoList from \"./TodoList\";\r\nimport AddTodo from './AddTodo'\r\nimport { todoData } from \"./todoData\";\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nexport default function TodoApp() {\r\n    const[todos, setTodos] = useState(todoData);\r\n\r\n    const markComplete = (index) => {\r\n      console.log(index);\r\n      const todo = todos[index];\r\n      todo.completed = !todo.completed;\r\n      todo.hits = todo.hits + 1;\r\n      todos[index] = todo;\r\n      setTodos([...todos]);\r\n    }\r\n  \r\n  const removeTodo = (index) => {\r\n      console.log(index);\r\n      todos.splice(index, 1);\r\n      setTodos([...todos]);\r\n      // Or Can be writted as below\r\n      // const newTodos = [...todos];\r\n      // newTodos.splice(index, 1);\r\n      // setTodos(newTodos);\r\n    }\r\n    \r\n    const addTodo = (title) => {\r\n        console.log('New Todo title', title);\r\n        const todo = {\r\n          id : uuidv4(),\r\n          title,\r\n          completed: false,\r\n          hits: 0\r\n        }\r\n        setTodos([...todos, todo]);\r\n      }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n          <div className=\"col-md-8 offset-md-2\">\r\n            <br/>\r\n            <h1>TodoApp with Hooks<span className=\"badge badge-secondary\">New</span></h1>\r\n            <br/>\r\n            <AddTodo addTodo={addTodo} />\r\n            <TodoList todos={todos} markComplete={markComplete} removeTodo={removeTodo} />\r\n          </div>\r\n        </div>\r\n      );\r\n}\r\n","import React from \"react\";\r\nimport TodoApp from './Components/TodoApp'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <TodoApp/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n// Put any other imports below so that CSS from your\r\n// components takes precedence over default styles.\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}